package com.codeoftheweb.salvo;import com.fasterxml.jackson.annotation.JsonIgnore;import org.hibernate.annotations.GenericGenerator;import javax.persistence.*;import java.time.LocalDateTime;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import java.util.Set;import java.util.stream.Collectors;import static java.util.stream.Collectors.toList;@Entitypublic class Game {    @Id    @GeneratedValue(strategy = GenerationType.AUTO, generator = "native")    @GenericGenerator(name = "native", strategy = "native")    private Long id;    private LocalDateTime date;    @OneToMany(mappedBy="game", fetch=FetchType.EAGER)    private Set<GamePlayer> gamePlayers;    @OneToMany(mappedBy="game", fetch=FetchType.EAGER)    private Set<Score> scores;    public Game(LocalDateTime date) {        this.date = date;    }    public Game() {        this.date = LocalDateTime.now();    }    public Map<String, Object> toDTO () {        Map<String, Object> dto = new LinkedHashMap<String, Object>();        dto.put("id", id);        dto.put("created", this.date);        dto.put ("gamesPlayers", this.gamePlayers.stream().map(GamePlayer::toDTO).collect(Collectors.toList()));        return dto;    }    @JsonIgnore    public List<Player> getPlayers() {        return gamePlayers.stream().map(sub -> sub.getPlayer()).collect(toList());    }    public LocalDateTime getDate() {        return date;    }    public void setDate(LocalDateTime date) {        this.date = date;    }    public Set<Score> getScores() {        return scores;    }    public void addGamePlayer (GamePlayer gamePlayer) {        gamePlayer.setGame(this);        gamePlayers.add(gamePlayer);    }    public void addScores(Score score) {        score.setGame(this);        scores.add(score);    }    public Set<GamePlayer> getGamePlayers() {        return gamePlayers;    }}